<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker/01</title>
      <link href="/2019/11/18/docker/01/"/>
      <url>/2019/11/18/docker/01/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节-配置-centos6-5以上的系统"><a href="#第一节-配置-centos6-5以上的系统" class="headerlink" title="第一节(配置)centos6.5以上的系统"></a>第一节(配置)centos6.5以上的系统</h3><ol><li><h3 id="安装centos-6-5-的minimal-–放弃-终端乱码"><a href="#安装centos-6-5-的minimal-–放弃-终端乱码" class="headerlink" title="安装centos 6.5 的minimal –放弃(终端乱码)"></a>安装centos 6.5 的minimal –放弃(终端乱码)</h3><ol><li><p><img src="01.assets/image-20191024192842127.png" alt="image-20191024192842127"></p></li><li><p>minimal的centos6.5报错,应该跟网络有关</p><p><img src="01.assets/image-20191024192523791.png" alt="image-20191024192523791"></p></li><li><blockquote><h6 id="出现如下错误信息，是因为DNS配置错误-我装的是Cent-OS-6-4-Server，没有图形界面，这个版本默认安装后"><a href="#出现如下错误信息，是因为DNS配置错误-我装的是Cent-OS-6-4-Server，没有图形界面，这个版本默认安装后" class="headerlink" title="出现如下错误信息，是因为DNS配置错误,我装的是Cent OS 6.4 Server，没有图形界面，这个版本默认安装后"></a>出现如下错误信息，是因为DNS配置错误,我装的是Cent OS 6.4 Server，没有图形界面，这个版本默认安装后</h6><p>配置文件中没有配置DNS。通过更改配置文件来解决</p><p>1.使用vi打开DNS的配置文件进行修改:   </p><p> 在命令提示符中输入: vi  /etc/sysconfig/network-scripts/ifcfg-eth0      </p><ol start="2"><li><h6 id="ONBOOT-yes"><a href="#ONBOOT-yes" class="headerlink" title="ONBOOT=yes"></a>ONBOOT=yes</h6></li></ol><h6 id="MM-CONTROLLED-no"><a href="#MM-CONTROLLED-no" class="headerlink" title="MM_CONTROLLED=no"></a>MM_CONTROLLED=no</h6></blockquote></li></ol></li><li><p>安装图形界面</p><p>1.在命令行下输入下面的命令来安装 Gnome 包<br> yum groupinstall “GNOME Desktop” “Graphical Administration Tools”</p><p> 安装GNOME桌面，运行startx 进入桌面。</p><ol start="2"><li>更新系统的运行级别<br>自动进入图形界面，那么我们需要更改系统的运行级别，输入下面的命令来启用图形界面。<br> ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target</li></ol></li></ol><ol start="3"><li><h3 id="安装6-5的精简桌面系统–放弃-kernel包无法安装"><a href="#安装6-5的精简桌面系统–放弃-kernel包无法安装" class="headerlink" title="安装6.5的精简桌面系统–放弃(kernel包无法安装)"></a>安装6.5的精简桌面系统–放弃(kernel包无法安装)</h3><ol><li><p>parallel tools报错</p><p><img src="01.assets/image-20191024205625160.png" alt="image-20191024205625160"></p></li><li><blockquote><p>yum install epel-release</p><p>yum –enablerepo=epel install dkms</p></blockquote></li><li><p><img src="01.assets/image-20191024205857944.png" alt="image-20191024205857944"></p></li><li><blockquote><p>还剩下一个kenel  packages没安装</p></blockquote><p><img src="01.assets/image-20191024210703849.png" alt="image-20191024210703849"></p></li><li></li></ol></li></ol><ol start="4"><li><h3 id="安装7-0不要安装parallel-tools"><a href="#安装7-0不要安装parallel-tools" class="headerlink" title="安装7.0不要安装parallel tools"></a>安装7.0不要安装parallel tools</h3><ol><li></li></ol></li></ol><h3 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h3><h3 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda</title>
      <link href="/2019/11/18/anaconda/"/>
      <url>/2019/11/18/anaconda/</url>
      
        <content type="html"><![CDATA[<h1 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节-MAC"><a href="#第一节-MAC" class="headerlink" title="第一节(MAC)"></a>第一节(MAC)</h3><ol><li><p>python多环境创建 激活 销毁</p><ul><li><p><img src="anaconda.assets/image-20191014175117834.png" alt="image-20191014175117834"></p></li><li><p><img src="anaconda.assets/image-20191014175128109.png" alt="image-20191014175128109"></p></li><li></li><li><p><img src="anaconda.assets/image-20191014175136724.png" alt="image-20191014175136724"></p></li><li><p><img src="anaconda.assets/image-20191014175147274.png" alt="image-20191014175147274"></p></li><li><p>参考</p><blockquote><p>conda install scipy<br>conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）<br>查看已经安装的packages<br>conda list<br>最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包<br>查看当前环境下已安装的包<br>conda list<br>查看某个指定环境的已安装包<br>conda list -n python34<br>查找package信息<br>conda search numpy<br>安装package<br>conda install -n python34 numpy<br>如果不用-n指定环境名称，则被安装在当前活跃环境<br>也可以通过-c指定通过某个channel安装<br>更新package<br>conda update -n python34 numpy<br>删除package<br>conda remove -n python34 numpy<br>更新conda，保持conda最新<br>conda update conda<br>更新anaconda<br>conda update anaconda<br>更新python<br>conda update python<br>假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</p><p>引用块内容<br>Anaconda创建环境：<br>//下面是创建python=3.6版本的环境，取名叫py36<br>conda create -n py36 python=3.6<br>删除环境（不要乱删啊啊啊）<br>conda remove -n py36 –all<br>激活环境<br>//下面这个py36是个环境名<br>source activate py36<br>退出环境<br>source deactivate</p></blockquote></li></ul></li><li><p>f</p></li></ol><h3 id="第二节-window"><a href="#第二节-window" class="headerlink" title="第二节(window)"></a>第二节(window)</h3><h3 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac软件</title>
      <link href="/2019/11/18/MacOS%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/"/>
      <url>/2019/11/18/MacOS%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MacOS效率软件清单"><a href="#MacOS效率软件清单" class="headerlink" title="MacOS效率软件清单"></a>MacOS效率软件清单</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h1><blockquote><p>以下软件是题主正在用或者曾经用过但觉得好用的App,希望对大家有帮助!!!</p></blockquote><h2 id="电脑必备软件"><a href="#电脑必备软件" class="headerlink" title="电脑必备软件"></a>电脑必备软件</h2><ol><li>常用的就不多说了<del>~</del>要就推荐AppStore没有的软件.jpg</li><li><strong>浏览器</strong>(google firefox以及原生safari)</li><li><strong>snipaste</strong>贴图神器(window版本也有)</li><li><strong>Dr.Unarchiver</strong>（文件解压，直接在App Store下载）</li></ol><h2 id="电脑系统增强软件"><a href="#电脑系统增强软件" class="headerlink" title="电脑系统增强软件"></a>电脑系统增强软件</h2><ol><li><p><a href="https://www.iina.io/" target="_blank" rel="noopener"><strong>IINA</strong></a>（适用于macOS的现代媒体播放器)</p><p>safari可以支持插件播放url地址里的视频,不用装Adobe Flash也可以播放网面视频啦<del>~</del></p></li></ol><ol start="2"><li><a href="https://snip.qq.com/" target="_blank" rel="noopener">Snip</a>(腾讯baba良心出品,好好珍惜这款滚动截屏==window的<a href="http://www.baidu.com/link?url=QQGm0v42aKC4DoHOu066H0yzTjraf8nrUkF4AzRf3k2klVDDxIovxn-tO1Ewv8usvcXUXj1dqJqlWpoGyvYSva" target="_blank" rel="noopener">Fast<em>Stone**Capture</em></a>)</li></ol><ol start="3"><li><strong>清理软件</strong>CleanMyMac|腾讯的柠檬清理</li></ol><ol start="4"><li><strong>Magnet</strong>分屏软件(类似windows的windows键+”上下左右键”)</li></ol><ol start="5"><li><strong>Alfred</strong>(spotlight的加强版本)</li></ol><ol start="6"><li><p><strong>Tusera NTFS</strong>（Mac上的NTFS格式文件读写软件,支持外接设备,黑苹果可直接识别windows的硬盘,可以进行<strong>读写</strong>）</p></li><li><p><strong>Dockey</strong>(可以快速的隐藏和显示Dock,解决Mac自动和显示程序坞过慢的问题—-系统自带用的太反人类,慢慢慢!!!)</p></li></ol><ol start="8"><li><strong>Brightness Slider for Mac</strong>(可以从菜单中调整屏幕亮度，就像Apple提供的声音菜单一样,并且有所改进控制调光过程。)</li></ol><ol start="9"><li><strong>Smooze</strong>(有用鼠标的可以看看,可宏定义鼠标按键功能)</li></ol><ol start="10"><li><strong>Bartender</strong>(自定义菜单栏上的图标显示)</li></ol><ol start="11"><li><p><strong>Synergy</strong>(是一款可让多台电脑共享一个鼠标与键盘的软件，用户可借助Synergy操作一个鼠标与键盘控制多个电脑，可用系统有windows、Mac OS、Linux等。有需要使用 Synergy 的用户可直接在华军软件园进行免费下载。)</p></li><li><p><strong>欧陆词典</strong>(学习编程和考研英语都不错)(强大的划词功能和简洁的翻译)</p></li></ol><ol start="13"><li><strong>CheatSheet</strong>(可显示各个应用的快捷键并可单击打开)</li></ol><h2 id="电脑专业和生产力软件"><a href="#电脑专业和生产力软件" class="headerlink" title="电脑专业和生产力软件"></a>电脑专业和生产力软件</h2><ol><li><p><strong>JetBrains全家桶</strong></p><ul><li>intelliJ IDEA（Java项目开发必备）</li><li>PyCharm(python)</li><li>WebStorm(html,css,js)</li><li>GoLand(go语言)</li></ul><p><strong>Adobe全家桶</strong></p><ul><li>PS 平面设计</li><li>PR 视频剪辑</li><li>AE 视频特效</li></ul></li><li><p><strong>Parallels Desktop</strong>(相当于window的VM ware,mac版本也有vm,但个人更喜欢PD,大家可根据自己的喜好自行下载)</p></li></ol><ol start="3"><li><strong>Sublime</strong>(轻量且可安装插件管理的编辑器)</li></ol><ol start="4"><li>Licecap(gif动图小软件)</li></ol><ol start="5"><li><strong>Insomnia</strong> 网络请求测试工具()</li></ol><ol start="6"><li><p><strong>Postman</strong>(Postman一款非常流行的API调试工具。其实，开发人员用的更多。因为测试人员做接口测试会有更多选择，例如Jmeter、soapUI等。不过，对于开发过程中去调试接口，Postman确实足够的简单方便，而且功能强大。)</p></li><li><p><strong>LiteIde</strong>(Go语言轻便的编译器)</p></li></ol><ol start="8"><li>VScode(编程不错)</li></ol><pre class=" language-mermaid"><code class="language-mermaid">graph LRA[Mac软件 ] --> C{效率装逼必备}    C -->|One| D[电脑必备软件]    C -->|Two| E[电脑系统增强软件]    C -->|Three| F[电脑专业和生产力软件]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2019/11/18/vim/"/>
      <url>/2019/11/18/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><ul><li><p>配置文件(去github找配置文件)</p><p>基本操作 </p><p>I:可以输入</p><p>“esc + : + wq + enter”  : “保存退出” </p><p>“q!” : “不保存退出”</p><p>vim ~/.vimrc 打开配置文件</p><p>set number显示行号</p><p>syntax on 高亮</p></li></ul><ul><li><p><img src="vim.assets/image-20191118074507644.png" alt="image-20191118074507644">一个单词的跳动</p><p><img src="vim.assets/image-20191008224216721.png" alt="image-20191008224216721"></p></li><li><p>上单翻页</p><p><img src="vim.assets/image-20191008224843830.png" alt="image-20191008224843830"></p></li><li><p>上下左右</p><p><img src="vim.assets/image-20191008224922143.png" alt="image-20191008224922143"></p></li><li><p>跳转某一行</p><p>ESC + 行数 + gg</p></li><li><p>terminal编译c</p><p><img src="vim.assets/image-20191009153756533.png" alt="image-20191009153756533"></p><p><img src="vim.assets/image-20191008230031092.png" alt="image-20191008230031092"></p></li><li><p>自定义跳转行数</p><p><img src="vim.assets/image-20191008230226497.png" alt="image-20191008230226497"></p></li><li><p>查找单词(shift +N) : “上一个”    N : “下一个”</p><p><img src="vim.assets/image-20191008230714091.png" alt="image-20191008230714091"></p></li><li><p>删除(实际上是剪切)</p><p>删除当前行:esc + cc</p><p>删除当前两行:esc + c2c</p><p><img src="vim.assets/image-20191008231522530.png" alt="image-20191008231522530"></p></li><li><p>粘贴</p><p>cc 后 按 p </p></li><li><p>d</p></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><h3 id="第一节-1"><a href="#第一节-1" class="headerlink" title="第一节"></a>第一节</h3><ul><li><p>v -&gt; j : “在当前位置连续向下选择”</p><p><img src="vim.assets/image-20191009071441639.png" alt="image-20191009071441639"></p></li><li><p>复制</p><p>yy</p></li><li><p>自动补全(只能在已有的代码里查找)</p><p>ctrl + M</p><p><img src="vim.assets/image-20191009071911167.png" alt="image-20191009071911167"></p></li><li><p>插件的安装</p><p>在 ~/.vimrc 的文件尾部载入以下代码</p><p>插件头尾部:<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug</a> </p><p>插件商店:<a href="https://vimawesome.com/plugin/nerdtree-red" target="_blank" rel="noopener">https://vimawesome.com/plugin/nerdtree-red</a></p><p><img src="vim.assets/image-20191009073532188.png" alt="image-20191009073532188"></p><p><img src="vim.assets/image-20191009073729761.png" alt="image-20191009073729761"></p><p>安装完成</p><p><img src="vim.assets/image-20191009073924208.png" alt="image-20191009073924208"></p></li><li><h3 id="NERDTree的使用"><a href="#NERDTree的使用" class="headerlink" title="NERDTree的使用"></a>NERDTree的使用</h3><ol><li><p>帮助文档</p><p>:help NERDTree.txt</p></li><li><p>调出nerdtree</p><p><img src="vim.assets/image-20191009121315767.png" alt="image-20191009121315767"></p></li><li><p>切换NERDTree的两个窗口</p><p><strong><em>ctrl + w</em></strong></p></li><li><p>打开vim 自动加载nerdtree</p><p><img src="vim.assets/image-20191009122101224.png" alt="image-20191009122101224"></p></li><li><p>不要加载nerdtree ,把箭头的两句删除或者注释(“开头)        事实上没有删除插件,依然在硬盘上</p><p><img src="vim.assets/image-20191009122246129.png" alt="image-20191009122246129"></p></li><li><p>从磁盘删除插件</p><p><img src="vim.assets/image-20191009122441934.png" alt="image-20191009122441934"></p></li><li></li></ol></li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/2019/11/18/nginx01/"/>
      <url>/2019/11/18/nginx01/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx01"><a href="#nginx01" class="headerlink" title="nginx01"></a>nginx01</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节-nginx特性"><a href="#第一节-nginx特性" class="headerlink" title="第一节(nginx特性)"></a>第一节(nginx特性)</h3><ol><li><p>反向代理</p><ol><li><p>正向代理—–通过代理服务器</p><p><img src="nginx01.assets/image-20191018163951539.png" alt="image-20191018163951539"></p></li><li><p>反向代理</p><ul><li>暴露的是反向代理服务器,隐藏真正的服务器</li><li>不用自己配置服务器(VPN需要自己配置—正向代理)</li><li>把代理服务器和tomcat(要访问资源的服务器)   -&gt; 看成一个整体</li><li><img src="nginx01.assets/image-20191018171946164.png" alt="image-20191018171946164"></li></ul></li><li></li></ol></li><li><p>负载均衡</p><p><img src="nginx01.assets/image-20191018172716621.png" alt="image-20191018172716621"></p></li><li><p>动静分离</p><p><img src="nginx01.assets/image-20191018172938119.png" alt="image-20191018172938119"></p></li></ol><h3 id="第二节-配置"><a href="#第二节-配置" class="headerlink" title="第二节(配置)"></a>第二节(配置)</h3><ol><li><p>nginx安装</p><ol><li><p>安装前:依赖</p><ul><li><p>pcre</p><blockquote><p>mv pcre-8.37.tar.gz /usr/src/    ———-把pcre-8.37.tar.gz 移动到/usr/src/ </p><p>tar -xvf pcre-8.37.tar.gz  ——-   解压代 /usr/src/目录下</p><p>cd pcre-8.37      ./configure    ——-   进入解压目录执行config命令(相关的配置)</p><p> make &amp;&amp; make install ——编译并且安装</p><p>查看版本号 —安装成功!!!</p><p><img src="nginx01.assets/image-20191018174859086.png" alt="image-20191018174859086"></p></blockquote></li><li><p>zlib</p></li><li><p>openssl</p><blockquote><p><img src="nginx01.assets/image-20191018175029912.png" alt="image-20191018175029912"></p><blockquote><p>yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</p></blockquote></blockquote></li></ul></li></ol></li></ol><ol start="2"><li><p>正式安装</p><blockquote><p><img src="nginx01.assets/image-20191018175329900.png" alt="image-20191018175329900"></p><blockquote><p> cd /usr/src</p><p> tar -xvf nginx-1.12.2.tar.gz </p><p>cd 目录</p><p>./configure</p><p>make  &amp;&amp; make install</p></blockquote><p><img src="nginx01.assets/image-20191018175802782.png" alt="image-20191018175802782"></p><p>软件一般都是安装在  /usr/local/       </p></blockquote></li><li><p>测试启动nginx</p><p>切换到 /usr/local/nginx/sbin   ——-运行./nginx 报错libpcre.so.1没找到</p><p><img src="nginx01.assets/image-20191018180233995.png" alt="image-20191018180233995"></p><p><strong><em>解决问题:</em></strong></p><blockquote><p>find / -type f -name <em>libpcre.so.</em>   #查看libpcre.so文件位置</p><p>ln -s /lib64/libpcre.so.0.0.1 /lib64/libpcre.so.1    #建立软链接</p></blockquote><p><img src="nginx01.assets/image-20191018180445615.png" alt="image-20191018180445615"></p></li><li><p>访问nginx</p><blockquote><p>/usr/local/nginx/conf/nginx.conf 可以修改端口</p><p><img src="nginx01.assets/image-20191018183839662.png" alt="image-20191018183839662"></p><p>linux修改拦截端口的权限 默认会拦截80端口</p><blockquote><p>/sbin/iptables -I INPUT -p tcp –dport 80 -j ACCEPT</p><p>/etc/rc.d/init.d/iptables save</p></blockquote><p><img src="nginx01.assets/image-20191018184741130.png" alt="image-20191018184741130"></p></blockquote></li></ol><ol start="5"><li></li><li></li></ol><ol start="2"><li><p>d</p></li><li><p>d</p></li><li><p>d</p></li><li><p>dd</p></li><li><p>d</p></li><li></li></ol><p>d</p><h3 id="第三节-常用命令"><a href="#第三节-常用命令" class="headerlink" title="第三节(常用命令)"></a>第三节(常用命令)</h3><ol><li><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><p><img src="nginx01.assets/image-20191018185144980.png" alt="image-20191018185144980"></p></li><li><p>查看版本号</p><blockquote><p>./nginx -v           ——–要加./ 不然会报错</p></blockquote></li><li><p>停止nginx</p><blockquote><p>./nginx -s stop     </p></blockquote></li><li><p>开启nginx</p><blockquote><p>./nginx</p></blockquote></li><li><p>重新加载nginx   会自动加载配置文件</p><blockquote><p>./nginx -s reload</p><p>报错  找不到配置文件</p><p><img src="nginx01.assets/image-20191018190013872.png" alt="image-20191018190013872"></p><p><strong><u>解决</u></strong>:</p><pre><code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></pre><p>　使用nginx -c的参数指定nginx.conf文件的位置</p><p><img src="nginx01.assets/image-20191018190146812.png" alt="image-20191018190146812"></p></blockquote></li></ul></li><li><h3 id="nginx的配置文件-文件放在与md文件同目录下"><a href="#nginx的配置文件-文件放在与md文件同目录下" class="headerlink" title="nginx的配置文件(文件放在与md文件同目录下)"></a>nginx的配置文件(文件放在与md文件同目录下)</h3><ol><li><p>位置</p><p><img src="nginx01.assets/image-20191018190301492.png" alt="image-20191018190301492"></p></li><li><p>全局块(全局的配置)</p><blockquote><p>worker_processes  1;</p><p>数字越大,处理并发的能力越强</p></blockquote></li><li><p>event块(nginx与用户的网络的连接)</p><blockquote><p>worker_connections  1024;</p><p>每个worker_processes 最大的连接数 1024</p></blockquote></li><li><p>http块(最频繁)</p><ol><li><p>http全局块</p><ul><li><p><img src="nginx01.assets/image-20191018191141956.png" alt="image-20191018191141956"></p></li><li><p>include       mime.types;</p><p>​    default_type  application/octet-stream;     </p><p>​    #log_format  main  ‘$remote_addr - $remote_user [$time_local] “$request” ‘</p><p>​    #                  ‘$status $body_bytes_sent “$http_referer” ‘</p><p>​    #                  ‘“$http_user_agent” “$http_x_forwarded_for”‘;</p><p>​    #access_log  logs/access.log  main;</p><p>​    sendfile        on;</p><p>​    #tcp_nopush     on;</p><p>​    #keepalive_timeout  0;</p><p>​    keepalive_timeout  65;</p><p>​    #gzip  on;</p></li></ul></li><li><p>server块</p><ul><li>全局server</li><li>locationserver</li></ul></li></ol></li></ol></li><li><h3 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h3><ul><li><p>实例1反向代理</p><blockquote><p>效果: <a href="http://www.fyz.com经过nginx跳转到我们自己搭建的linux+tomcat服务器" target="_blank" rel="noopener">www.fyz.com经过nginx跳转到我们自己搭建的linux+tomcat服务器</a></p><p>步骤一:tomcat安装 ——redis哪里有教程</p><p>步骤二:<img src="nginx01.assets/image-20191018193624120.png" alt="image-20191018193624120"></p><p><img src="nginx01.assets/image-20191018205026821.png" alt="image-20191018205026821"></p><p>步骤二:找到hosts文件进行修改即可</p><p>mac:/etc/hosts</p><p>win:C:\Windows\System32\drivers\etc\hosts</p><p>success:</p><p><img src="nginx01.assets/image-20191018193934459.png" alt="image-20191018193934459"></p><p>步骤三:不报错,却无法转发</p><blockquote><p>问题一:</p><pre><code>`# vim /etc/nginx/nginx.conf`</code></pre><pre><code>`# nginx -s reload`</code></pre></blockquote><blockquote><p>问题二:</p><pre><code>`# cd /etc/selinux``# vim config`</code></pre><p>将SELINUX设置为disabled，然后重启你的虚拟机 reboot</p></blockquote></blockquote></li><li><p>实例2</p><ul><li><p>效果</p><p>访问路径&gt; <a href="http://www.fyz.com:9001/vod/8081.html" target="_blank" rel="noopener">http://www.fyz.com:9001/vod/8081.html</a>   (<a href="http://www.fyz.com:nginx服务器的ip地址" target="_blank" rel="noopener">www.fyz.com:nginx服务器的ip地址</a>)</p><p>转发&gt; <a href="http://127.0.0.1:8080/edu/8080.html" target="_blank" rel="noopener">http://127.0.0.1:8080/edu/8080.html</a></p></li><li><p>新建多一个端口8081的tomcat 并修改端口</p><p>/usr/local/tomcat8081/apache-tomcat-7.0.57/conf/server.xml 中修改</p><p>8080 —&gt;8081</p><p>8009 —&gt;8019</p><p>8005—&gt;8015</p></li><li><p>修改/usr/local/nginx/conf/nginx.conf</p><p><img src="nginx01.assets/image-20191018212848336.png" alt="image-20191018212848336"></p></li><li><p>扩展</p><p><img src="nginx01.assets/image-20191018213007587.png" alt="image-20191018213007587"></p></li><li></li></ul></li></ul></li><li><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ol><li><p>访问:<a href="http://www.fyz.com/edu/8080.html" target="_blank" rel="noopener">http://www.fyz.com/edu/8080.html</a></p><p>端口 号80访问时不用加</p></li><li><p>修改配置文件</p><p><img src="nginx01.assets/image-20191018215057065.png" alt="image-20191018215057065"></p></li><li><p>项目分布在两个tomcat ,每一个tomcat的webapps/edu/8080.html</p><p><img src="nginx01.assets/image-20191018215804582.png" alt="image-20191018215804582"></p></li><li><p>负载均衡就是通过nginx 随机访问两者中的一个tomcat</p></li><li><p>服务器分配的策略</p><ul><li><p>轮询</p><p><img src="nginx01.assets/image-20191018220304932.png" alt="image-20191018220304932"></p></li><li><p>weight 值越大,分配给tomcat 的客户机就越多</p><p><img src="nginx01.assets/image-20191018220358046.png" alt="image-20191018220358046"></p></li><li><p>ip_hash   一个用户绑定一个tomcat  第一次访问那一个服务器下一次就还是那个</p><p><img src="nginx01.assets/image-20191018220802344.png" alt="image-20191018220802344"></p></li><li><p>fair 根据相应时间 </p><p><img src="nginx01.assets/image-20191018220920123.png" alt="image-20191018220920123"></p></li></ul></li><li><p>d</p></li></ol></li><li><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><ol><li><p><img src="nginx01.assets/image-20191018225927863.png" alt="image-20191018225927863"></p></li><li><p>修改配置文件</p><p><img src="nginx01.assets/image-20191018231924747.png" alt="image-20191018231924747"></p></li><li><p>访问:<a href="http://www.fyz.com/image/" target="_blank" rel="noopener">http://www.fyz.com/image/</a> </p><p><img src="nginx01.assets/image-20191018232014623.png" alt="image-20191018232014623"></p></li></ol></li></ol><ol start="4"><li><p>以上是静态 资源的加载 在nginx服务器完成</p></li><li><p>动态资源则转发到tomcat等后端服务器上获取</p></li><li><p>expires属性:3d  适合长时间不更新数据的网站</p><blockquote><p>不需要从后端服务器tomcat上获取,直接从nginx上获取,节约资源</p></blockquote></li></ol><ol start="6"><li><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><ol><li><p><img src="nginx01.assets/image-20191019071723841.png" alt="image-20191019071723841"></p><p><img src="nginx01.assets/image-20191019072258980.png" alt="image-20191019072258980"></p></li><li><p>准备工作</p></li><li><p><img src="nginx01.assets/image-20191019072810319.png" alt="image-20191019072810319"></p></li><li><p>keepalived安装成功</p><p><img src="nginx01.assets/image-20191019072908259.png" alt="image-20191019072908259"></p></li><li><p>keepalive的配置文件   —–对应ziliao的资料有</p><p><img src="nginx01.assets/image-20191019073028055.png" alt="image-20191019073028055"></p></li><li><p><img src="nginx01.assets/image-20191019085257846.png" alt="image-20191019085257846"></p><p> 启动keepalived</p></li></ol><p><img src="nginx01.assets/image-20191019085441923.png" alt="image-20191019085441923"></p><p><img src="nginx01.assets/image-20191019085718038.png" alt="image-20191019085718038"></p></li><li><h3 id="nginx的原理"><a href="#nginx的原理" class="headerlink" title="nginx的原理"></a>nginx的原理</h3><ol><li><p>一个nginx有 一个master  多个worker</p><p><img src="nginx01.assets/image-20191019091615468.png" alt="image-20191019091615468"></p></li><li><p>这种机制有什么好处?</p><ul><li><p>利于nginx做热部署操作</p><blockquote><p>./nginx -s reload 后 cli发送的请求会转发的第二个worker进行处理,不影响第一个worker的工作</p></blockquote></li><li><p>一个worker占用一个进程,即使有bug也互不影响,worker之间的任务争抢也不用造成服务的中断</p></li><li></li></ul></li><li><p>设置多少个worker合适?</p><ul><li>nginx与redis一样,有<u>多路复用的功能</u>,即是一个进程里面有一个主线程,但win系统没有这种功能</li><li>一个worker可以把一个CPU性能发挥到极致,所有worker数量==cpu核心数</li></ul></li><li><p>一次cli访问nginx需要worker_connect占用worker连接数是?</p><ul><li>2个—访问静态资源</li><li>4个—访问tomcat等动态资源</li><li><img src="nginx01.assets/image-20191019092819756.png" alt="image-20191019092819756"></li></ul></li><li><p><img src="nginx01.assets/image-20191019093059823.png" alt="image-20191019093059823"></p><p>静态态4 * 1024 /2  = 2048</p><p>动态4 * 1024 /4 = 1024</p><p>答案有两个</p><blockquote><p> 公式:<img src="nginx01.assets/image-20191019093317798.png" alt="image-20191019093317798"></p></blockquote></li><li></li></ol></li><li></li></ol><h2 id="第一天-1"><a href="#第一天-1" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><h3 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h3><h3 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令B站灯笼/入门教程01</title>
      <link href="/2019/11/18/linux%E5%91%BD%E4%BB%A4B%E7%AB%99%E7%81%AF%E7%AC%BC/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01/"/>
      <url>/2019/11/18/linux%E5%91%BD%E4%BB%A4B%E7%AB%99%E7%81%AF%E7%AC%BC/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01/</url>
      
        <content type="html"><![CDATA[<h1 id="入门教程01"><a href="#入门教程01" class="headerlink" title="入门教程01"></a>入门教程01</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><ul><li><p>日历时间(linux是正斜杠/) ——(win是反斜杠)</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010090339223.png" alt="image-20191010090339223"></p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010090449751.png" alt="image-20191010090449751"></p></li><li><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010090918213.png" alt="image-20191010090918213"></p></li><li><p>clear:清除屏幕</p></li><li><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010091403318.png" alt="image-20191010091403318"></p></li></ul><h3 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h3><ol><li><p>退回上一层目录</p><blockquote><p>cd ..</p></blockquote></li><li><p>回到根目录</p><p>cd /</p></li><li><p>创建和删除dir</p><p>mkdir test/</p><p>rmdir test/</p></li><li><p>查看文件内容</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010094946809.png" alt="image-20191010094946809"></p></li><li><p>拷贝文件</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010095028782.png" alt="image-20191010095028782"></p></li><li><p>查看两个文件是否相同</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010095225313.png" alt="image-20191010095225313"></p></li></ol><p>   <img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010095334727.png" alt="image-20191010095334727"></p><h3 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h3><ol><li><p>查看文本内容的头尾内容</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010101749609.png" alt="image-20191010101749609"></p></li><li><p>查看文件的行数 word数 字节数</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010102430743.png" alt="image-20191010102430743"></p></li><li><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01.assets/image-20191010102522458.png" alt="image-20191010102522458"></p></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程环境</title>
      <link href="/2019/11/18/env/"/>
      <url>/2019/11/18/env/</url>
      
        <content type="html"><![CDATA[<h1 id="各种编程环境"><a href="#各种编程环境" class="headerlink" title="各种编程环境"></a>各种编程环境</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节node-js"><a href="#第一节node-js" class="headerlink" title="第一节node.js"></a>第一节node.js</h3><ol><li><h3 id="node-js-http-nodejs-cn-download"><a href="#node-js-http-nodejs-cn-download" class="headerlink" title="node.js(http://nodejs.cn/download/)"></a>node.js(<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a>)</h3><h5 id="npm命令"><a href="#npm命令" class="headerlink" title="npm命令"></a>npm命令</h5><ul><li><code>npm -v</code>来测试是否成功安装</li><li>查看当前目录已安装插件：<code>npm list</code></li><li>更新全部插件： <code>npm update [ --save-dev ]</code></li><li>使用 npm 更新对应插件： <code>npm update &lt;name&gt; [ -g ] [ --save-dev]</code></li><li>使用 npm 卸载插件： <code>npm uninstall &lt;name&gt; [ -g ] [ --save-dev ]</code></li></ul><h5 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h5><ul><li>淘宝团队做的国内镜像，因为npm的服务器位于国外可能会影响安装。淘宝镜像与官方同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</li><li>安装：命令提示符执行<br><code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></li><li><code>cnpm -v</code>来测试是否成功安装</li></ul><h5 id="通过改变地址来使用淘宝镜像"><a href="#通过改变地址来使用淘宝镜像" class="headerlink" title="通过改变地址来使用淘宝镜像"></a>通过改变地址来使用淘宝镜像</h5><ul><li>npm的默认地址是<code>https://registry.npmjs.org/</code></li><li>可以使用<code>npm config get registry</code>查看npm的仓库地址</li><li>可以使用<code>npm config set registry https://registry.npm.taobao.org</code>来改变默认下载地址，达到可以不安装<code>cnpm</code>就能采用淘宝镜像的目的，然后使用上面的get命令查看是否成功。</li></ul><h5 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h5><ul><li><p><code>nrm</code>包安装命令： <code>npm i nrm -g</code></p></li><li><p><code>nrm</code>能够管理所用可用的镜像源地址以及当前所使用的镜像源地址，但是只是单纯的提供了几个url并能够让我们在这几个地址之间方便切换</p></li></ul></li></ol><h5 id="g-S-D"><a href="#g-S-D" class="headerlink" title="-g -S -D"></a>-g -S -D</h5><ul><li><code>-g</code>：全局安装。 将会安装在C：\ Users \ Administrator \ AppData \ Roaming \ npm，<strong>并且写入系统环境变量</strong>；非全局安装：将会安装在当前定位目录;全局安装可以通过命令行任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过要求调用;<ul><li><code>-S</code>：即<code>npm install module_name --save</code>,写入<code>package.json</code>的<code>dependencies</code>,<code>dependencies</code>是需要发布到生产环境的，比如jq，vue全家桶，ele-ui等ui框架这些项目运行时必须使用到的插件就需要放到<code>dependencies</code></li></ul></li><li><code>-D</code>：即<code>npm install module_name --save-dev</code>,写入<code>package.json</code>的<code>devDependencies</code>,<code>devDependencies</code>里面的插件只用于开发环境，不用于生产环境。比如一些babel编译功能的插件、webpack打包插件就是开发时候的需要，真正程序打包跑起来并不需要的一些插件。</li></ul><blockquote><p>为什么要保存在<code>package.json</code>因为node_module包实在是太大了。用一个配置文件保存，只打包安装对应配置文件的插件，按需导入。</p></blockquote><ol start="2"><li><p>node_module的存放位置</p><p><img src="%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83.assets/image-20191116092903878.png" alt="image-20191116092903878"></p></li><li><p>node和npm的位置</p><p><img src="%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83.assets/image-20191116092925273.png" alt="image-20191116092925273"></p></li><li><h3 id="taro小程序一统天下"><a href="#taro小程序一统天下" class="headerlink" title="taro小程序一统天下"></a>taro小程序一统天下</h3><ul><li><p>安装</p><p><img src="%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83.assets/image-20191116093129491.png" alt="image-20191116093129491"></p></li><li><p>新建taro项目   ———–新建一个taro文件夹打开终端 </p><p><img src="%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83.assets/image-20191116094122096.png" alt="image-20191116094122096"></p></li><li><p>运行</p><p><img src="%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83.assets/image-20191116094348703.png" alt="image-20191116094348703"></p></li><li><p>修改权限 index.js  —-修改端口</p><blockquote><p>sudo chmod -R 777 config</p><p><img src="%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83.assets/image-20191116100428305.png" alt="image-20191116100428305"></p></blockquote></li><li><p>切换超级用户</p><blockquote><p>sudo -s</p></blockquote></li><li><p>s</p></li></ul></li><li><p>放大</p></li></ol><h3 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h3><h3 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h3><h2 id="第一天-1"><a href="#第一天-1" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><h3 id="第二节-1"><a href="#第二节-1" class="headerlink" title="第二节"></a>第二节</h3><h3 id="第三节-1"><a href="#第三节-1" class="headerlink" title="第三节"></a>第三节</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令B站灯笼/入门教程02</title>
      <link href="/2019/11/18/linux%E5%91%BD%E4%BB%A4B%E7%AB%99%E7%81%AF%E7%AC%BC/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02/"/>
      <url>/2019/11/18/linux%E5%91%BD%E4%BB%A4B%E7%AB%99%E7%81%AF%E7%AC%BC/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02/</url>
      
        <content type="html"><![CDATA[<h1 id="入门教程02"><a href="#入门教程02" class="headerlink" title="入门教程02"></a>入门教程02</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><ul><li><p>删除和创建文件</p><blockquote><p>rm  -rf 1.txt</p><p>-d或–directory 　直接把欲删除的目录的硬连接数据删成0，删除该目录。<br>-f或–force 　强制删除文件或目录。<br>-i或–interactive 　删除既有文件或目录之前先询问用户。<br>-r或-R或–recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。<br>-v或–verbose 　显示指令执行过程。</p></blockquote></li><li><p>移动和修改文件mv</p><blockquote><p>mv 1.txt helloworld.txt     把1.txt重命名为helloworld.txt</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010104155949.png" alt="image-20191010104155949"></p></blockquote><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010105217836.png" alt="image-20191010105217836"></p></li><li><p>按方向键浏览文件内容 相word一样    (与cat 1.txt 不同)</p><blockquote><p>less 1.txt</p></blockquote></li><li><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010105749045.png" alt="image-20191010105749045"></p></li></ul><h3 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h3><ol><li><p>判断是目录还是文件</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010105928877.png" alt="image-20191010105928877"></p></li><li><p>权限修改</p><blockquote><p>chmod u-r 1.txt   //使user没有read的权限</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010110526933.png" alt="image-20191010110526933"></p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010110353797.png" alt="image-20191010110353797"></p></blockquote></li><li><p>通过二进制修改权限</p><blockquote><p>chmod 444 2.txt //把2.txt文件的user group other 都设置为可读(100 100 100) </p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010114113246.png" alt="image-20191010114113246"></p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010114008559.png" alt="image-20191010114008559"></p></blockquote></li><li><p>关键词搜索</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010115223327.png" alt="image-20191010115223327"></p><blockquote><p>1.查找以H开头的</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010115303718.png" alt="image-20191010115303718"></p><p>2.”.”      :     “表示任意”</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010115439538.png" alt="image-20191010115439538"></p><ol start="3"><li><p>“[]”  : “众多选择其一”</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010115916260.png" alt="image-20191010115916260"></p></li></ol></blockquote></li><li><p>wc与grep的结合</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02.assets/image-20191010120149472.png" alt="image-20191010120149472"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令B站灯笼/入门教程03</title>
      <link href="/2019/11/18/linux%E5%91%BD%E4%BB%A4B%E7%AB%99%E7%81%AF%E7%AC%BC/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03/"/>
      <url>/2019/11/18/linux%E5%91%BD%E4%BB%A4B%E7%AB%99%E7%81%AF%E7%AC%BC/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03/</url>
      
        <content type="html"><![CDATA[<h1 id="入门教程03"><a href="#入门教程03" class="headerlink" title="入门教程03"></a>入门教程03</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><ul><li><p>重定向符号</p><blockquote><p>把ls查询出来的内容保存到 redirect.txt文件中</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010131312497.png" alt="image-20191010131312497"></p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010131330977.png" alt="image-20191010131330977"></p></blockquote></li><li><p>linux脚本(一堆linux命令写到一个文件中)  .sh结尾</p><blockquote><p>效果图</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010150937605.png" alt="image-20191010150937605"></p></blockquote></li><li><p>sh文件可以输出变量</p><blockquote><p>a=10</p><p>echo $a</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010151543796.png" alt="image-20191010151543796"></p></blockquote></li><li><p>变量不能放空格  (a = 10) : 报错</p><blockquote><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010152125231.png" alt="image-20191010152125231"></p></blockquote></li><li><p>echo “hello”   == echo hello</p><blockquote><p>打不打””无所谓</p></blockquote></li><li><p>test.sh代码(基本操作)</p><pre class=" language-shell"><code class="language-shell">a=10  #不能加空格b=3# 加上`expr`c=`expr $a + $b` #乘法的× 要有转义，不然linux会识别成正则表达式d=`expr $a \* $b`#括号也需要写转义字符 \(\)echo $d</code></pre></li><li><p>test1.sh(for while)</p><blockquote><pre class=" language-shell"><code class="language-shell">echo “test1”a=5b=35#shell里面不能用 > <符号if [ $a -gt $b ]then   echo $aelse   echo $bfiecho “test2”#for循环输出#for x in {1 .. 10} 高版本的linux可以简化for x in 1 2 3 4 5do   echo $xdoneecho “test3”#赋值不能有空格#while循环输出x=1while [ $x -le 10 ]do   echo $x   x=`expr $x + 1`done</code></pre><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010154903872.png" alt="image-20191010154903872"></p></blockquote></li><li><p>test2.sh</p><blockquote><pre class=" language-shell"><code class="language-shell">:<<!echo "test1"#字符串a="hello"b="world"#打印结果有空格 hello worldecho $a $b!#输入操作echo "test2"echo "Please enter a: "read aecho "Please enter b: "read bc=`expr $a + $b`echo $a + $b = $c#验证密码password="123"echo "test2"echo "Please enter the password: "read userPasswordif [ $password = $userPassword ]then   echo "correct!"    else   echo "incorrect!"fi</code></pre></blockquote></li><li><p>test3.sh(字符串的判断)</p><blockquote><pre class=" language-shell"><code class="language-shell">#字符串的拼接str1="hello"str2="world"str3="$str1 $str2"echo $str3#判断str1是否为零 #  -z: zero  -n :no zero()  if [ -z $str1 ]then    echo "str1 null"else       echo "str1 no null"fi</code></pre></blockquote></li><li><p>有数组的时候,用bash命令运行</p></li><li><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010163432313.png" alt="image-20191010163432313"></p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010163546958.png" alt="image-20191010163546958"></p></li><li><p>test4.sh(1.循环输出数组  2.找出数组的最大值) </p><blockquote><pre class=" language-shell"><code class="language-shell">arr=(7 8 9 10)#循环输出数组sum=0#i指的是元素本身，不是indexfor i in ${arr[@]}do   echo $i   sum=`expr $sum + $i`doneecho "sum =" $sum#找出数组的最大值max=${arr[0]}#i指的是元素本身，不是indexfor i in ${arr[@]}do   if [ $i -gt $max ]   then       max=$i   fidoneecho "max =" $max</code></pre></blockquote></li></ul><h3 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h3><ol><li><p>shell系统默认变量</p><ul><li><p>PATH(LINUX的环境变量是以:隔开   win是以;隔开)</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010170214581.png" alt="image-20191010170214581"></p></li><li><p>USER HOME </p><blockquote><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010170356021.png" alt="image-20191010170356021"></p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010170359715.png" alt="image-20191010170359715"></p></blockquote></li><li><p>压缩</p><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010172119169.png" alt="image-20191010172119169"></p></li><li><p>tar.gz</p><blockquote><p><img src="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B03.assets/image-20191010172945243.png" alt="image-20191010172945243"></p></blockquote></li></ul></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis+linux/01</title>
      <link href="/2019/11/18/redis+linux/01/"/>
      <url>/2019/11/18/redis+linux/01/</url>
      
        <content type="html"><![CDATA[<p>redis01(centos6–yum)</p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节-配置下载"><a href="#第一节-配置下载" class="headerlink" title="第一节(配置下载)"></a>第一节(配置下载)</h3><ol><li><h3 id="centos6的安装"><a href="#centos6的安装" class="headerlink" title="centos6的安装"></a>centos6的安装</h3><ul><li><p>根据02.md来安装系统</p></li><li><p>paralllel tools的安装</p><ol><li><p><strong>把其他用户拥有root权限</strong></p><p>到root用户修改权限 位于/etc/sudoers文件的权限(</p><p>执行vi命令，编辑/etc/sudoers文件，添加要提升权限的用户；在文件中找到root  ALL=(ALL) ALL，在该行下添加提升权限的用户信息，如：</p><p>root    ALL=(ALL)       ALL</p><blockquote><p>user    ALL=(ALL)       ALL</p></blockquote></li><li><p>保存退出，并恢复/etc/sudoers的访问权限为440</p><blockquote><p><strong>chmod 440 /etc/sudoers</strong></p></blockquote></li><li><blockquote><p>ls -l /dev | grep cdrom </p></blockquote><p>sr0的文件–cdrom(这个就是parallel tools)</p></li><li><blockquote><p>sudo mount /dev/cdrom  /mnt    完成挂载</p><p>cd /mnt </p><p>sudo ./install 安装tools</p></blockquote></li></ol></li><li></li><li><p>d</p></li></ul></li><li><h3 id="依赖JDK，TOMCAT，MYSQL"><a href="#依赖JDK，TOMCAT，MYSQL" class="headerlink" title="依赖JDK，TOMCAT，MYSQL"></a>依赖JDK，TOMCAT，MYSQL</h3><blockquote><p>yum install glibc.i686                 (———–jdk)</p><p>yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6     (———–mysql)</p><p>yum  update libstdc++-4.4.7-4.el6.x86_64</p><p>yum install gcc-c++</p></blockquote></li><li><h3 id="卸载openjdk-原生的jdk"><a href="#卸载openjdk-原生的jdk" class="headerlink" title="卸载openjdk(原生的jdk)"></a>卸载openjdk(原生的jdk)</h3><ul><li><p>查询java  -qa  (query all)</p><blockquote><p>rpm -qa |grep java</p></blockquote></li></ul><p><img src="01.assets/image-20191016182435962.png" alt="image-20191016182435962"></p><ul><li><p>卸载</p><blockquote><p>rpm -e -nodeps ##</p><p>sudo rpm -e –nodeps java-1.6.0-openjdk-1.6.0.41-1.13.13.1.el6_8.x86_64</p></blockquote></li><li><p>解压</p><blockquote><p>sudo tar -zxvf jdk-7u71-linux-i586.tar.gz -C /usr/local/java  (-c 是解压成一个文件夹)</p></blockquote></li><li><p>配置jdk的环境变量</p><blockquote><ol><li></li><li>vim /etc/profile</li></ol><p>#set java environment</p><p>JAVA_HOME=/usr/local/java/jdk1.7.0_71</p><p>CLASSPATH=.:$JAVA_HOME/lib/tools.jar</p><p>PATH=$JAVA_HOME=/bin:$PATH</p><p>export JAVA_HOME CLASSPATH PATH</p></blockquote><p>​    (md有乱码)</p><blockquote><p><img src="01.assets/image-20191016191106631.png" alt="image-20191016191106631"></p></blockquote></li></ul></li></ol><pre><code> &gt; 重新加载配置文件：【否则环境变量不会重新执行】 &gt; &gt; source /etc/profile</code></pre><ul><li><blockquote><p>jdk的环境没问题 出现错误(docker 中的centos的jdk )</p><p><img src="01.assets/image-20191026081238008.png" alt="image-20191026081238008"></p></blockquote><blockquote><p>sudo yum install glibc.i686</p></blockquote></li></ul><ol start="4"><li><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul><li><p>卸载mysql</p><blockquote><p> sudo rpm -e –nodeps mysql-libs-5.1.73-8.el6_8.x86_64</p><p>为什么要卸载自带的:体验自己配置的美妙(骚话<del>~</del>)</p></blockquote></li><li><p><img src="01.assets/image-20191016201938074.png" alt="image-20191016201938074"></p><blockquote><p>rpm -ivh MySQL-client-5.5.49-1.linux2.6.i386.rpm</p></blockquote></li><li><p>不用指定安装目录——会自动的安装在 /usr目录下</p></li><li><p>可能会缺少依赖</p><p><img src="01.assets/image-20191016202344199.png" alt="image-20191016202344199"></p><blockquote><p>yum install  libncurses.so.5 </p></blockquote></li><li><p>不能开启mysql 服务————without updating PID file</p><p><img src="01.assets/image-20191016203457032.png" alt="image-20191016203457032"></p><blockquote><p>解决: </p><p><img src="01.assets/image-20191016203508756.png" alt="image-20191016203508756"></p></blockquote><p>启动成功:</p><p><img src="01.assets/image-20191016203611811.png" alt="image-20191016203611811"></p></li><li><p>修改mysql密码</p><ol><li><p><img src="01.assets/image-20191016210417036.png" alt="image-20191016210417036"></p></li><li><p>1、编辑/etc/my.cnf(一般情况下)  这里是特殊情况 rpm安装的</p><p><img src="01.assets/image-20191016210609697.png" alt="image-20191016210609697"></p><p>在[mysqld] 配置部分添加一行</p><blockquote><p>skip-grant-tables</p></blockquote><p>2、保存后重启mysql</p><blockquote><p>service mysqld restart</p></blockquote><p>3、登录数据库重新设置root密码</p><blockquote><p>mysql -uroot -p </p></blockquote><p>4、回车登录</p><blockquote><p>&gt;use mysql;<br>&gt;update user set password=password(“123456”)where user=”root”;<br>更改密码为 newpassword<br>&gt;flush privileges; 更新权限<br>&gt;quit 退出</p></blockquote></li><li><p>删除/etc/my.cnf(这里my-default.cnf   /usr/share/mysql)文件中添加的“skip-grant-tables”行，重启mysql；</p><p>用新设的密码就能正常登录了；</p></li><li><p><img src="01.assets/image-20191016222808434.png" alt="image-20191016222808434"></p></li><li><p>mysql服务自动的开启</p><p><img src="01.assets/image-20191016223053655.png" alt="image-20191016223053655"></p></li><li><p>//赋予root用户所有权限，远程登录密码是123456</p><blockquote><p>&gt;grant all privileges on <em>.</em> to ‘root’ @’%’ identified by ‘123456’;</p></blockquote><blockquote><p>&gt;flush privileges;</p></blockquote></li><li><p>Linux防火墙默认拦截3306端口</p><blockquote><p>/sbin/iptables -I INPUT -p tcp –dport 3306 -j ACCEPT</p><p>/etc/rc.d/init.d/iptables save</p></blockquote></li><li><p>d</p></li><li><p>d</p></li><li></li></ol></li></ul></li></ol><ul><li><p>d</p></li><li><p>d</p></li></ul><ol start="5"><li><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><ol><li><p><strong>解压tomcat</strong></p><p>tar -zxvf apache-tomcat-7.0.57.tar.gz -C /usr/local/tomcat</p><p><strong>设置防火墙：</strong></p><p>开放8080端口</p><p>/sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT</p><p>保存配置</p><p>/etc/rc.d/init.d/iptables save</p></li><li><p><strong>启动tomcat：</strong></p><p>启动tomcat</p><p>执行 /usr/local/tomcat/apache-tomcat-7.0.57/bin/startup.sh</p><p>关闭tomcat</p><p>执行 /usr/local/tomcat/apache-tomcat-7.0.57/bin/shutdown.sh</p></li><li><p>./startup.sh 如果报错 可能与jdk没正确配置有关</p><blockquote><p>/etc/profile修改</p></blockquote></li><li><p>d</p></li></ol></li></ol><ol start="6"><li><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><ol><li><h4 id="了解数据库"><a href="#了解数据库" class="headerlink" title="了解数据库"></a>了解数据库</h4><p>关系型数据库（SQL）：</p><p>Mysql，oracle</p><p>​    特点：数据和数据之间，表和字段之间，表和表之间是存在关系的</p><p>​    例如：部门表 001部分，   员工表 001</p><p>​          用户表，用户名、密码</p><p>​          分类表 和 商品表， 一对多关系。 </p></li></ol></li></ol><pre><code>  ​    优点：①&lt;u&gt;数据之间有关系，&lt;/u&gt;进行数据的增删改查时非常方便的。  ​          ②关系型数据库 有事务操作。 &lt;u&gt;保证数据的完整性&lt;/u&gt;  ​    缺点：1、因为数据和数据之间有关系的，&lt;u&gt;关系是由底层大量算法保证&lt;/u&gt;  ​                大量算法会&lt;u&gt;拉低系统运行速度&lt;/u&gt;  ​                大量算法&lt;u&gt;会消耗系统资源&lt;/u&gt;  ​          3、&lt;u&gt;甚至无法更改字段&lt;/u&gt;  ​                update product set cname = ‘手机数码’;//修改所有数据  ​                把商品表的cname字段，由varchar(64),  char(100)  ​    适合处理一般量级数据，安全。  非关系型数据库（NOSQL）：  ​    &lt;u&gt;为了处理海量数据&lt;/u&gt;，(不会造成经济巨大的损失)  ​    Redis  ​    优点：1、海量数据的增删改查，非常轻松应对  ​          2、海量数据的维护非常轻松。  ​    缺点：1、&lt;u&gt;数据和数据之间没有关系，所以不能一目了然&lt;/u&gt;  ​          2、非关系型数据库，没有关系，&lt;u&gt;没有强大的事务保证数据的 完整和安全&lt;/u&gt;  ​    适合处理海量数据，效率。不一定安全  ​    奥运健儿奖牌总数  &lt;u&gt;关系型数据库+非关系型数据库 ====》项目&lt;/u&gt;   &lt;u&gt;重要数据      海量操作数据，不重要&lt;/u&gt;</code></pre><ol start="2"><li><h4 id="使用环境redis"><a href="#使用环境redis" class="headerlink" title="使用环境redis"></a>使用环境redis</h4><p>Redis使用环境：</p><p>1、关系型数据库的缓存存在</p><p><img src="01.assets/image-20191017085815358.png" alt="image-20191017085815358"></p><p>2、可以做任务队列</p><p><img src="01.assets/image-20191017085922737.png" alt="image-20191017085922737"></p><p>3、大量数据运算</p></li><li><h4 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h4><ol><li><p>gcc    redis是C语言开发，安装redis需要将源码编译，</p><blockquote><p>yum install gcc-c++</p></blockquote></li><li><p>redis安装</p><ul><li>​    步骤1：    解压文件 tar –zxvf redis-3.0.0.tar.gz</li></ul></li></ol></li></ol><pre><code>     - ​    步骤2：    编译redis (编译，将.c文件编译为.o文件)     &gt; 进入解压文件夹，cd redis-3.0.0     &gt; ​    执行**make**     Ps:如果没有安装gcc，编译将出现错误提示。（如果安装失败，必须删除文件夹，重写解压）         - ​    步骤3：    安装       &gt; make PREFIX=/usr/local/redis install        &gt; 安装在/usr/local/redis目录下     - ​    步骤4：    安装完后，在/usr/local/redis/bin下有几个可执行文件       ![image-20191017093140083](01.assets/image-20191017093140083.png)     - ​    步骤5：    redis启动需要一个配置文件redis.conf，可以改端口号等信息。       &gt; cd  /home/f/bag/redis-3.0.0  (刚刚解压缩完的文件夹===编译的文件夹)       &gt;       &gt; cp redis.conf /usr/local/redis       &gt;       &gt;   3. redis server端启动成功     ![image-20191017093909654](01.assets/image-20191017093909654.png)  4. cli端启动成功     ![image-20191017094422413](01.assets/image-20191017094422413.png)     ![image-20191017094335904](01.assets/image-20191017094335904.png)  5. 如何机器在外网     &gt; 启动redis，客户端连接：默认 连接6379端口     &gt;     &gt; redis-cli -h ip地址 -p 端口   6. ### 以上是前端的连接方式     缺点:-&lt;u&gt;无法部署集群&lt;/u&gt;----容错性差----一台挂全部挂  7. 关闭redis-server     redis的关闭：     ①查询到PID,kill -9 pid  【断电，非正常关闭，一般不用，否则造成数据丢失】     ②正常关闭  【正常关闭，数据保存】     **./bin/redis-cli shutdown**  8. 后端模式     - 改usr/local/redis/redis.conf    线程保护开启       ![image-20191017095906373](01.assets/image-20191017095906373.png)     - 启动时，指定配置文件     - &gt; cd /usr/local/redis/       &gt;       &gt; ./bin/redis-server ./redis.conf       ![image-20191017100459149](01.assets/image-20191017100459149.png)     -   9. </code></pre><ol start="4"><li><h3 id="redis的key-value-map"><a href="#redis的key-value-map" class="headerlink" title="redis的key-value (map)"></a>redis的key-value (map)</h3><ol><li><blockquote><p>key:全部都是字符串</p><p>value:有五种数据类型</p><p><img src="01.assets/image-20191017104038805.png" alt="image-20191017104038805"></p></blockquote></li><li><p>Key名：自定义，key名不要过长，否则影响使用效率</p></li></ol></li></ol><pre><code>     Key名不要太短，最好是有意义。</code></pre><ol start="7"><li><p>mysql root 123456</p></li><li><p><img src="01.assets/image-20191016181502903.png" alt="image-20191016181502903"></p></li><li><blockquote><p>root wbhszmm1  (我不会设置密码1)</p></blockquote></li></ol><h3 id="第二节-其他笔记"><a href="#第二节-其他笔记" class="headerlink" title="第二节(其他笔记)"></a>第二节(其他笔记)</h3><ol><li><p>命令</p><ul><li><p>管理 |</p><p><img src="01.assets/image-20191015184608947.png" alt="image-20191015184608947"></p></li><li><p>查看进程 </p><blockquote><p>ps -ef</p></blockquote><p><img src="01.assets/image-20191015191846987.png" alt="image-20191015191846987"></p></li><li><p>管道 把带有bash 的进程命令查询出来</p><p><img src="01.assets/image-20191015192637132.png" alt="image-20191015192637132"></p></li><li><p>杀死进程</p></li><li><blockquote><p>kill -9 PID</p></blockquote><p><img src="01.assets/image-20191015195852098.png" alt="image-20191015195852098"></p></li><li><p>网络及重启</p><p><img src="01.assets/image-20191015200644956.png" alt="image-20191015200644956"></p></li><li><p>rpm</p><p><img src="01.assets/image-20191016181608945.png" alt="image-20191016181608945"></p></li></ul></li></ol><ul><li><p>nautilus 打开图形文件夹</p></li><li><p><img src="01.assets/image-20191016201551465.png" alt="image-20191016201551465"></p></li></ul><h3 id="第三节-redis-少量命令"><a href="#第三节-redis-少量命令" class="headerlink" title="第三节(redis 少量命令)"></a>第三节(redis 少量命令)</h3><ol><li><p>string命令</p><ol><li><p>redis和mysql的编解码问题 和数据与传递</p></li><li><p>MySQL-关系型数据库，二进制不安全。【乱码丢失数据】</p><p><img src="01.assets/image-20191017105747981.png" alt="image-20191017105747981"></p></li><li><p>Redis  二进制数据安全</p><p><img src="01.assets/image-20191017105829517.png" alt="image-20191017105829517"></p></li><li><blockquote><p>(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</p><p>解决:</p><p>运行config set stop-writes-on-bgsave-error no　命令后，关闭配置项stop-writes-on-bgsave-error解决该问题。</p></blockquote></li><li><p>增删改查</p><p>赋值：———-增改</p><ul><li><strong>set key value</strong>：如果该key存在则进行覆盖操作。总是返回”OK”</li></ul><p>取值：———-查</p><ul><li><strong>get key</strong>：获取key的value。如果与该key关联的value不是String类型，redis将返回错误信息，因为<u>get命令只能用于获取String value</u>；<strong>如果该key不存在，返回(nil)</strong>。</li></ul><p>删除：———-删</p><ul><li><p><strong>del key</strong> ：删除指定key</p><p>返回值是数字类型，表示删了几条数据</p></li><li><p><strong>getset</strong> ——先拿到名字在modify</p></li></ul><p><img src="01.assets/image-20191017114606695.png" alt="image-20191017114606695"></p></li></ol></li></ol><ol start="6"><li><p>扩展string 命令</p><blockquote><p>incr key</p><p>decr key</p></blockquote><p><img src="01.assets/image-20191017120139808.png" alt="image-20191017120139808"></p><blockquote><p>appent key value </p><p>拼凑字符串。如果该key存在，则在原有的value后追加该值；如果该key不存在，则重新创建一个key/value</p></blockquote><blockquote><p>incrby key increment </p><p>incrby num1 10         num1 = num1 + 10</p></blockquote></li><li><blockquote><p> flushdb</p></blockquote><p>  清空db的数据</p></li></ol><ol start="2"><li><p>hash的命令</p><ol><li><p>Hash  —-   {username:”张三”,age:”18”,sex:”man”}——javaBean</p><p>Hash特点：占用的磁盘空间极少</p></li></ol></li></ol><pre><code>  ![image-20191017122127057](01.assets/image-20191017122127057.png)  ![image-20191017122202067](01.assets/image-20191017122202067.png)  赋值：  - hset key field value：为指定的key设定field/value对（键值对）。  - **hmset key field value [field2 value2 …]**：设置key中的多个filed/value  取值：  - hmget key filed1 filed2 ….：获取key中的多个filed的值  - hgetall key：获取key中的所有filed-vaule  删除：  - **del key** ：删除整个hash</code></pre><ol start="2"><li><blockquote><p>hincrby hash1 age 10</p><p>​               key     field  increment</p></blockquote></li><li><blockquote><p>判断hash1是否存在(key)</p><p><img src="01.assets/image-20191017151258948.png" alt="image-20191017151258948"></p><p>hexists hash1 uname</p></blockquote></li><li><blockquote><p>判断hash1(key)的长度</p><p>hlen hash1</p></blockquote></li><li><blockquote><p>hash1的的所有字段和值</p><p>hkeys hash1</p><p>hvals hash1</p></blockquote><p><img src="01.assets/image-20191017151703263.png" alt="image-20191017151703263"></p></li></ol><ol start="3"><li><p>jedis操作数据库 eclipse</p><ol><li><p>防火墙设置</p><blockquote><p><img src="01.assets/image-20191017155725049.png" alt="image-20191017155725049"></p><p>解决:</p><p>开放8080端口</p><p>/sbin/iptables -I INPUT -p tcp –dport 6379 -j ACCEPT</p><p>保存配置</p><p>/etc/rc.d/init.d/iptables save</p><p><img src="01.assets/image-20191017155652539.png" alt="image-20191017155652539"></p></blockquote></li><li><p>eclipse访问redis成功</p><p><img src="01.assets/image-20191017155908842.png" alt="image-20191017155908842"></p></li></ol></li></ol><h2 id="第二天-额外扩展"><a href="#第二天-额外扩展" class="headerlink" title="第二天(额外扩展)"></a>第二天(额外扩展)</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><ol><li><p>putty客户端 win传送文件到linux </p><blockquote><p>基本命令格式：<em>pscp 文件 用户名@LinuxIP:目录</em></p><p>例子: pscp D:\testspringmvc.war <a href="mailto:root@10.126.45.56" target="_blank" rel="noopener">root@10.126.45.56</a>:/opt/java/</p></blockquote><blockquote><p>linux的/usr/没有权限,,/tmp/可以</p></blockquote></li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis+linux/02</title>
      <link href="/2019/11/18/redis+linux/02/"/>
      <url>/2019/11/18/redis+linux/02/</url>
      
        <content type="html"><![CDATA[<p><strong>备注：</strong></p><p>CentOS 6.6系统镜像有32位和64位两个版本，这里提供DVD版的。</p><p>4G内存以上使用x86_64位的系统。</p><p><strong>附：CentOS 6.6下载地址</strong></p><p>32位DVD版本：</p><p><a href="http://vault.centos.org/6.6/isos/i386/CentOS-6.6-i386-bin-DVD1.iso" target="_blank" rel="noopener">http://vault.centos.org/6.6/isos/i386/CentOS-6.6-i386-bin-DVD1.iso</a></p><p>64位DVD版本：</p><p><a href="http://vault.centos.org/6.6/isos/x86_64/CentOS-6.6-x86_64-bin-DVD1.iso" target="_blank" rel="noopener">http://vault.centos.org/6.6/isos/x86_64/CentOS-6.6-x86_64-bin-DVD1.iso</a></p><p>其他版本：</p><p><a href="http://vault.centos.org/6.6/isos" target="_blank" rel="noopener">http://vault.centos.org/6.6/isos</a></p><p><strong>安装说明：</strong></p><p>1、安装CentOS 6.6系统的计算机内存必须等于或者大于628M（最小内存628M），才能使用图形安装模式。</p><p>2、CentOS 6.6的系统安装方式分为：图形安装模式和文本安装模式。</p><p>3、CentOS 6.6文本安装模式不支持自定义分区，建议使用图形安装模式安装。</p><p>5、CentOS 6.6系统运行方式分为：带图形界面、可以用鼠标操作的图形化方式和不带图形界面、直接用命令行操作的文本方式。</p><p><strong>一、安装CentOS 6.6</strong></p><p>用光盘成功引导系统，会出现下面的界面</p><p><strong>界面说明：</strong></p><p>Install or upgrade an existing system            安装或升级现有的系统 </p><p>Install system with basic video driver            安装过程中采用 基本的显卡驱动           </p><p>Rescue installed system                                 进入系统修复模式         </p><p>Boot from local drive                                    从本地硬盘启动</p><p>Memory test                                                   内存检测</p><p>​         </p><p>​            这里选择第一项，安装或升级现有的系统，回车。  </p><p><img src="02.assets/102e6cb0befb207afa1fed134f97dece.png-wh_500x0-wm_3-wmp_4-s_159796117.png" alt="102e6cb0befb207afa1fed134f97dece.png-wh_"></p><p>  出现是否对CD媒体进行测试的提问，这里选择“Skip”跳过测试（方向键控制移动）。 </p><p>​     <img src="02.assets/2d6121c5435cd2e158a7e52121b36490.png-wh_500x0-wm_3-wmp_4-s_4231193953.png" alt="2d6121c5435cd2e158a7e52121b36490.png-wh_"></p><p>  出现下面的界面，Next下一步</p><p>​    <img src="02.assets/5a7064b9f03b90a95b65cffb7cfaa737.png-wh_500x0-wm_3-wmp_4-s_3329375341.png" alt="5a7064b9f03b90a95b65cffb7cfaa737.png-wh_"></p><p>​    </p><p>​    </p><p>​        选择语言为：English（English） #生产服务器建议安装英文版本</p><p>​     <img src="02.assets/ce5ee48433109837d263a7ab9f0586c1.png-wh_500x0-wm_3-wmp_4-s_245800550.png" alt="ce5ee48433109837d263a7ab9f0586c1.png-wh_"></p><p>​        键盘选择为：U.S.English</p><p>​    <img src="02.assets/f3551ff57799536f97f11a542dc84c36.png-wh_500x0-wm_3-wmp_4-s_2842500997.png" alt="f3551ff57799536f97f11a542dc84c36.png-wh_"></p><p>​        </p><p>​        选择第一项，基本存储设备，下一步</p><p>​        <img src="02.assets/4abe4f23b3e5e36cc074e3cb0118ab65.png-wh_500x0-wm_3-wmp_4-s_2660582387.png" alt="4abe4f23b3e5e36cc074e3cb0118ab65.png-wh_"></p><p>​    </p><p>​            </p><p>​            格式化，选择第一项：Yes，忽略所有数据</p><p>​    <img src="02.assets/3f29f62b012cbc6d82c7d08d2ff8e92d.png-wh_500x0-wm_3-wmp_4-s_3430188651.png" alt="3f29f62b012cbc6d82c7d08d2ff8e92d.png-wh_"></p><p>​    </p><p>​        设置主机名，这里默认即可，安装完成之后可以再修改</p><p>​        下一步</p><p>​        <img src="02.assets/7d5a05142c93d236741d0791dd6a6478.png-wh_500x0-wm_3-wmp_4-s_2986321821.png" alt="7d5a05142c93d236741d0791dd6a6478.png-wh_"></p><p>​    </p><p>​    </p><p>​            时区选择：Asia/Shanghai”System clock user UTC”  #取消前面打勾，不使用UTC时间   </p><p>​    <img src="02.assets/10de42c2ff02606346b776f31efc81ee.png-wh_500x0-wm_3-wmp_4-s_2099678037.png" alt="10de42c2ff02606346b776f31efc81ee.png-wh_"></p><p>​            设置root密码</p><p>​    注意：如果你使用的密码过于简单，系统会自动提示：您的密码不够安全，过于简单化/系统化，选择“Use                 Anyway” 无论如何都使用。</p><p>​    <img src="02.assets/6892925492595d0c17d671e1f64c8eb9.png-wh_500x0-wm_3-wmp_4-s_724407399.png" alt="6892925492595d0c17d671e1f64c8eb9.png-wh_"></p><p>​      选择最后一项，Create Custom Layout 创建自定义分区 </p><p>​            <strong>使用说明：</strong></p><p>​            which type of installation would you like？            你选择哪种类型的安装？</p><p>​            Use All space                                                        使用所有空间（删除设备所有分区）</p><p>​            Replace Existing Linux System（s）                       替换现有Linux系统（只删除之前linux安装创建的）</p><p>​            Shrink Current System                                          缩小现有系统（缩小现有分区以便默认布局生存剩余空间）</p><p>​            Use Free space                                                      使用剩余空间（保留现有分区数据且只使用设备中未分区空间）</p><p>​            Create Custom Layout                                           使用自定义分区</p><p>​    <img src="02.assets/a1f04d258416ab7e376984a8b99b5b1e.png-wh_500x0-wm_3-wmp_4-s_4263753164.png" alt="a1f04d258416ab7e376984a8b99b5b1e.png-wh_"></p><p>​    </p><p>​            可以看到硬盘的容量，我这里显示的是20G，现在自定义分区</p><p>​    <img src="02.assets/895d81ff264f3676b60a725b7485c77b.png-wh_500x0-wm_3-wmp_4-s_564846311.png" alt="895d81ff264f3676b60a725b7485c77b.png-wh_"></p><p>​      选中空闲分区Free，点创建Create</p><p>​    选择标准分区Standard Partition，点创建Create</p><p>​    <img src="02.assets/a346bc8a7fdcf5576c6d6827550d8907.png-wh_500x0-wm_3-wmp_4-s_3620526221.png" alt="a346bc8a7fdcf5576c6d6827550d8907.png-wh_"></p><p>​    </p><p>​    文件系统类型：swap（虚拟内存）</p><p>​    设置大小Size：2048（内存小于2G时，设置为内存的2倍；内存大于或等于2G时，设置为2G）</p><p>​    其他选项默认即可</p><p>​    确定 OK</p><p>​    <img src="02.assets/2f80c2ba2cf5977e649942db2dcf0956.png-wh_500x0-wm_3-wmp_4-s_3246918859.png" alt="2f80c2ba2cf5977e649942db2dcf0956.png-wh_"></p><p>​    </p><p>​            继续选中空闲分区Free，点创建Create</p><p>​    选择标准分区Standard Partition，点创建Create</p><p>​    挂载点：/</p><p>​    文件系统类型：ext4</p><p>​    选中“使用全部可用空间”</p><p>​    其他选项默认即可</p><p>​    确定 OK</p><p>​    注意：生产环境建议单独划分一个date数据区，保证安全。</p><p>​    <img src="02.assets/d24401a8b90763d433f91f06c181c36d.png-wh_500x0-wm_3-wmp_4-s_172483787.png" alt="d24401a8b90763d433f91f06c181c36d.png-wh_"></p><p>​    </p><p>​    创建好分区之后，如下图所示，然后点Next</p><p>​    <img src="02.assets/4c8d151b7f55b9d4f6e8de18b820ff90.png-wh_500x0-wm_3-wmp_4-s_1571184674.png" alt="4c8d151b7f55b9d4f6e8de18b820ff90.png-wh_"></p><p>​    </p><p>​    点“Format”格式化</p><p>​    <img src="02.assets/6947856bfcd88339cfc1383719e2f002.png-wh_500x0-wm_3-wmp_4-s_3798969153.png" alt="6947856bfcd88339cfc1383719e2f002.png-wh_"></p><p>​    </p><p>选择“Write changes to disk”将修改写入磁盘</p><p>​    <img src="02.assets/ee3395f246fb7a5bcd05dc1d578c0b82.png-wh_500x0-wm_3-wmp_4-s_2096063772.png" alt="ee3395f246fb7a5bcd05dc1d578c0b82.png-wh_"></p><p>​    </p><p>​        保持默认 Next</p><p>​    <img src="02.assets/0047efb0b11a126233a859c03550abaf.png-wh_500x0-wm_3-wmp_4-s_1271057025.png" alt="0047efb0b11a126233a859c03550abaf.png-wh_"></p><p>​    </p><p>​            选择Minimal（生产环境）</p><p>​    <img src="02.assets/6ffbf0fd57d60ff687c2a52cdc17beb8.png-wh_500x0-wm_3-wmp_4-s_1512663311.png" alt="6ffbf0fd57d60ff687c2a52cdc17beb8.png-wh_"></p><p>​    </p><p>​        开始安装</p><p>​    <img src="02.assets/ce6732990c18aff5afa372f622c0982c.png-wh_500x0-wm_3-wmp_4-s_3387045203.png" alt="ce6732990c18aff5afa372f622c0982c.png-wh_"></p><p>​    </p><p>​    <img src="02.assets/dff4e4cfd9fe6c3d023436b69f8404bd.png-wh_500x0-wm_3-wmp_4-s_2967152460.png" alt="dff4e4cfd9fe6c3d023436b69f8404bd.png-wh_"></p><p>​    </p><p>​        安装完成，点“Reboot”重新引导，系统自动重启</p><p>​        重启之后，出现下面登录界面</p><p>​    <img src="02.assets/14afd46cb926884a41d2ffaba9a6614c.png-wh_500x0-wm_3-wmp_4-s_3213121965.png" alt="14afd46cb926884a41d2ffaba9a6614c.png-wh_"></p><p>​    </p><p>​        输入账号root和密码（输入密码的时候是不显示的），</p><p>​    <img src="02.assets/751ca17681e210994589c54c82786d0d.png-wh_500x0-wm_3-wmp_4-s_111667335.png" alt="751ca17681e210994589c54c82786d0d.png-wh_"></p><p>​    </p><p>​        成功登录系统   如下图 </p><p>​    <img src="02.assets/34934de8c2328c74ee49019a440f681f.png-wh_500x0-wm_3-wmp_4-s_175897711.png" alt="34934de8c2328c74ee49019a440f681f.png-wh_"></p><p>​    <strong>说明：CentOS 6.6默认安装好之后是没有自动开启网络连接的！</strong></p><p>​    修改IP地址<br>​    修改/etc/sysconfig/network-scripts/ifcfg-eth0文件，如果有多张网卡，则修改相应的网卡<br>​        # vi /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>​    按i进入编辑模式<br>​        DEVICE=eth0                             #网卡对应的设备别名<br>​        BOOTPROTO=static                   #网卡获得ip地址的方式（默认为dhcp，表示自动获取）<br>​        HWADDR=00:0C:29:58:DB:71    #网卡MAC地址（物理地址）<br>​        IPADDR=192.168.1.31         #IP地址<br>​        NETMASK=255.255.255.0          #子网掩码<br>​        ONBOOT=yes                             #系统启动时是否激活此设备</p><p>​    按ESC键退出，并输入:wq!（w保存，q退出，!强制退出）</p><pre><code>    修改网关地址: 修改/etc/sysconfig/network文件     \# vi /etc/sysconfig/network    NETWORKING=yes                #表示系统是否使用网络，no表示不能使用网络    HOSTNAME=doiido                #设置本机的主机名，要和/etc/hosts中设置的主机名相同（#hostname  ）    GATEWAY=192.168.1.1      #设置网关的IP地址(设置你自己的网关)</code></pre><p>​    这个时候已经可以ping通IP地址，但是还无法ping通域名，因此需要修改DNS</p><p>​        修改DNS:<br>​     修改/etc/resolv.conf文件<br>​        # vi /etc/resolv.conf<br>​        nameserver 192.168.1.1                   #我路由器默认的<br>​        nameserver 114.144.114.114               #国内域名服务器</p><p>​     重启网卡:<br>​        # service network restart<br>​     正在关闭接口eth0：[确定]<br>​     关闭环回接口：[确定]<br>​     弹出环回接口：[确定]<br>​     弹出界面 eth0： [确定]</p><p>​    这个时候，系统就可以正常的上网了</p><p>#注：其实网关地址和DNS也是可以写在ifcfg-eth0中，但是为了规范起见，将他们分开写.</p><p>​    ping 114.114.114.114</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis+linux/03</title>
      <link href="/2019/11/18/redis+linux/03/"/>
      <url>/2019/11/18/redis+linux/03/</url>
      
        <content type="html"><![CDATA[<h1 id="redis03"><a href="#redis03" class="headerlink" title="redis03"></a>redis03</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节-redis常用命令"><a href="#第一节-redis常用命令" class="headerlink" title="第一节(redis常用命令)"></a>第一节(redis常用命令)</h3><ol><li><h3 id="数组和链表的选择"><a href="#数组和链表的选择" class="headerlink" title="数组和链表的选择"></a>数组和链表的选择</h3><ul><li><p>Java List ：  数组ArrayList   <u>优点:访问快  缺点:存储慢</u></p><p>​                    链表LinkedList  <u>优点:访问慢  缺点:存储快</u></p></li><li><p>为什么redis选取了链表？</p><p>Redis操作中<u>，最多的操作是进行元素的增删</u></p><p>使用环境：①做大数据集合的增删</p><p>​                   ②任务队列</p></li><li></li></ul></li><li><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>赋值：</p><ul><li><blockquote><p>lpush key values[value1 value2…]：从左边一个个添加元素</p></blockquote></li><li><blockquote><p>rpush key values[value1、value2…]：在该list的尾部添加元素。</p><p><img src="03.assets/image-20191017182151820.png" alt="image-20191017182151820"></p></blockquote></li></ul><p>取值：</p><ul><li><blockquote><p>lrange key start end**：获取链表中从start到end的元素的值，start、end从0开始计数；也可为负数，若为-1则表示链表尾部的元素，-2则表示倒数第二个，依次类推… </p><p><img src="03.assets/image-20191017182202073.png" alt="image-20191017182202073"></p></blockquote></li></ul><p>删值：</p><ul><li><blockquote><p>lpop key**：返回并弹出指定的key关联的链表中的第一个元素，即头部元素。如果该key不存在，返回nil；若key存在，则返回链表的头部元素。</p></blockquote></li><li><blockquote><p>​    <strong>rpop key</strong>：从尾部弹出元素。</p></blockquote></li></ul><p>扩展：</p><ul><li><blockquote><p>1    llen key：返回指定的key关联的链表中的元素的数量。</p></blockquote></li><li><blockquote><p>2    <strong>rpoplpush resource destination</strong>：将链表中的尾部元素弹出并添加到头部。[循环操作]</p></blockquote><blockquote><p>3  这种删除方法效率低,需要索引多次</p><p> lrem list3 0 a        </p></blockquote><blockquote><p><img src="03.assets/image-20191017183530271.png" alt="image-20191017183530271"></p><p>4.通过索引修改list</p><p>lset list1 2 aaa</p><p><img src="03.assets/image-20191017184602048.png" alt="image-20191017184602048"></p><p>5.通知值插入</p><blockquote><p> linsert list1 before aaa ccc</p></blockquote><p><img src="03.assets/image-20191017184755165.png" alt="image-20191017184755165"></p><p>6.把list1的元素右弹出 插入到左list2中去</p><blockquote><p>rpoplpush list1 list2</p><p>rpoplpush list1 list1 循环队列</p></blockquote></blockquote></li></ul></li><li><h3 id="Set命令"><a href="#Set命令" class="headerlink" title="Set命令"></a>Set命令</h3><p>Redis操作中，涉及到两个大数据集合的并集，交集，差集运算。</p><p>赋值：</p><ul><li><strong>sadd key values[value1、value2…]</strong>：向set中添加数据，如果该key的值已有则不会重复添</li><li><img src="03.assets/image-20191017195012053.png" alt="image-20191017195012053"></li></ul><p>取值：</p><ul><li><p><strong>smembers key</strong>：获取set中所有的成员</p><p><img src="03.assets/image-20191017195027201.png" alt="image-20191017195027201"></p></li><li><p><strong>sismember key member</strong>：判断参数中指定的成员是否在该set中，1表示存在，0表示不存在或者该key本身就不存在。（无论集合中有多少元素都可以极速的返回结果）</p></li><li><p><img src="03.assets/image-20191017195037536.png" alt="image-20191017195037536"></p></li></ul><p>删值：</p><ul><li><p>srem key members[member1、member2…]**：删除set中指定的成员</p></li><li><p><img src="03.assets/image-20191017195053364.png" alt="image-20191017195053364"></p></li></ul></li></ol><p>   交并集 差集</p><ul><li><p>差集运算：</p><ul><li><strong>sdiff key1 key2…</strong>：返回key1与key2中相差的成员，<strong>而且与key的顺序有关</strong>。即<strong>返回差集</strong>。</li></ul><p>（属于A并且不属于B的元素构成的集合）</p></li></ul><pre><code> 交集运算： - **sinter key1 key2 key3…**：**返回交集**。 （属于A且属于B的元素构成的集合） 并集运算： - **sunion key1 key2 key3…**：**返回并集**。 - ![image-20191017201740947](03.assets/image-20191017201740947.png)</code></pre><p>   扩展集合</p><ul><li><p>查看set的数量</p><blockquote><p> scard set1</p></blockquote><p><img src="03.assets/image-20191017201847674.png" alt="image-20191017201847674"></p></li><li><p>随机查看set中的元素</p><blockquote><p>srandmember set1 </p><p><img src="03.assets/image-20191017201952058.png" alt="image-20191017201952058"></p></blockquote></li><li><p>把set1 set2 的并集存储</p></li><li><blockquote><p>sunionstore set3 set1 set2</p></blockquote><p><img src="03.assets/image-20191017202209255.png" alt="image-20191017202209255"></p></li></ul><ol start="4"><li><h3 id="有序set集合"><a href="#有序set集合" class="headerlink" title="有序set集合"></a>有序set集合</h3><p>有序set集合，专门用来做排行榜</p><p>赋值：</p><ul><li>zadd key score member score2 member2 … ：将所有成员以及该成员的分数存放到sorted-set中。如果该元素已经存在则会用新的分数替换原有的分数。返回值是新加入到集合中的元素个数，不包含之前已经存在的元素。</li></ul><p>查看：</p><ul><li><p>zscore key member：返回指定成员的分数</p></li><li><p>zrange key start end [withscores]：获取集合中脚标为start-end的成员，[withscores]参数表明返回的成员包含其分数。（分数由小到大排列）</p></li><li><p>zrevrange key start end [withscores]：获取集合中脚标为start-end的成员，[withscores]参数表明返回的成员包含其分数。（分数由大到小排列）</p></li></ul><p>删值：</p><ul><li><p>zrem key member[member…]：移除集合中指定的成员，可以指定多个成员。</p><p><img src="03.assets/image-20191017203406089.png" alt="image-20191017203406089"></p><p>陌生:</p><p><img src="03.assets/image-20191017203900320.png" alt="image-20191017203900320"></p><p><img src="03.assets/image-20191017204034851.png" alt="image-20191017204034851"></p></li></ul></li><li><h3 id="五中数据类型的通用操作-string-hash-list-set-zset"><a href="#五中数据类型的通用操作-string-hash-list-set-zset" class="headerlink" title="五中数据类型的通用操作(string hash list set zset)"></a>五中数据类型的通用操作(string hash list set zset)</h3><ul><li><strong>keys</strong> pattern：获取所有与pattern匹配的key，返回所有与该key匹配的keys。</li></ul><p><strong>通配符：</strong>           *表示任意0个或多个任意字符，?表示任意一个字符</p><blockquote><p>keys *                     查询所有的key</p></blockquote><ul><li><p><strong>del key1 key2…</strong>：删除指定的key</p></li><li><p><strong>exists key</strong>：判断该key是否存在，1代表存在，0代表不存在</p></li><li><p>type key：返回的字符串为string、list、set、hash和zset，如果key不存在返回none。</p></li></ul></li></ol><p>   设置key有效/过期</p><ul><li><p><strong>expire key</strong> ：设置key的生存时间，单位：秒如果某个key过期，redis会将其删除</p></li><li><p><strong>ttl key</strong>：获取该key所剩的超时时间，如果没有设置超时，返回-1。<u>如果返回-2表示超时不存在。</u></p></li></ul><ol start="6"><li><h3 id="消息的订阅-监听-与发布"><a href="#消息的订阅-监听-与发布" class="headerlink" title="消息的订阅(监听)与发布"></a>消息的订阅(监听)与发布</h3><p>订阅新闻，新闻发布</p><p>subscribe channel：订阅频道，例：subscribe mychat，</p><p>psubscribe channel<em>：批量订阅频道，例：psubscribe s</em>，订阅以”s”开头的频道</p><p>publish channel content：在指定的频道中发布消息，如 publish mychat ‘today is a newday’</p></li><li><h3 id="16个数据库"><a href="#16个数据库" class="headerlink" title="16个数据库"></a>16个数据库</h3><p>MySQL-数据库可以自己用语句<strong>自定义创建</strong></p><p>create database xxxx;</p></li></ol><p>   redis-也是有数据库的。 Redis已经提前创建好了。</p><blockquote><p>Redis默认有16个数据库。0，1，2…….15</p></blockquote><p>   <u>在redis上所做的所有数据操作，都是默认在0号数据库上操作</u></p><p>   <u>数据库和数据库之间，不能共享键值对。</u></p><p>   切换数据库：</p><p>   select 数据库名;</p><p>   把某个键值对进行数据库移植：</p><p>   move newkey 1：将当前库的key移植到1号库中</p><p>   慎用</p><p>   清空当前数据库：flushdb</p><p>   和redis服务器数据的清空：flushall</p><ol start="8"><li><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>MySQL-事务：数据完整性，安全。</p><p>Redis-事务：  进行redis语句的<u>批量化执行</u></p><ul><li><p>multi：开启事务用于标记事务的开始，<strong>其后执行的命令都将被存入命令队列</strong>，直到执行EXEC时，这些命令才会被原子的执行，：begin transaction</p></li><li><p>exec：提交事务，：commit        执行批量化</p></li><li><p>discard：事务回滚，：rollback     不执行批量化操作</p></li></ul></li><li><h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><ul><li><p>quit   退出客户端</p><p>ctrl+c</p></li><li><p>dbsize     返回当前数据库中key 的数目</p></li><li><p>info    查看redis数据</p></li><li><p>ping   会返回pong则连通server</p></li><li></li></ul></li><li><p>RDB</p><p>1.</p><p>持久化：把数据保存在硬盘上—–.MySQl硬盘上操作断电.—–硬盘上的数据还是存在。</p><p>非关系型数据库redis：在内存中进行操作。</p><p>断电以后，redis的<strong><u>部分</u></strong>数据会丢失，丢失的数据是保存在内存中的数据。</p><p>2.</p><p>Redis有两种持久化策略：</p><p>RDB:是redis的默认持久化机制。</p><p>​        RDB相当于照快照。保存的是一种状态。20G数据—-几kb快照</p><p>​        优点：①快照保存数据速度极快，还原数据速度极快②适用于灾难备份</p><p>​        缺点：①小内存机器不适合使用。</p></li></ol><pre><code>RDB机制符合要求就会照快照。（随时随地启动），会占用一部分系统资源（突然的）,很可能内存不足直接宕机。（宕机后，服务器会关闭，非正常关闭）​                ① 服务器正常关闭时 照快照​                ② Key满足一定条件，照快照​        适用于：内存比较充裕的计算机。​        RDB何时进行照快照：​        ①服务器正常关闭时，会照一次快照   ./bin/redis-cli shutdown​        ②key满足一定条件，会照一次快照​            - λ    save 900 1 #每900秒(15分钟)至少有1个key发生变化，则dump内存快照。- λ    save 300 10 #每300秒(5分钟)至少有10个key发生变化，则dump内存快照- λ    save 60 10000 #每60秒(1分钟)至少有10000个key发生变化，则dump内存快照</code></pre><ol start="11"><li><p>AOf(日志备份)</p><p>AOF: 使用日志功能保存数据操作。默认AOF机制关闭的。</p><p>每秒同步（默认）：每秒进行一次AOF保存数据。               安全性低，比较节省系统资源</p><p>每修改同步：只要有key变化语句，就进行AOF保存数据。比较安全，但是极为浪费效率</p><p>不同步：不进行任何持久化操作                不安全</p><p>​      AOF操作：</p><p>​                只会保存导致key变化的语句</p><p>​     AOF配置：</p><p>always    #每次有数据修改发生时都会写入AOF文件</p><p>everysec  #每秒钟同步一次，该策略为AOF的缺省策略</p><p>no       #从不同步。高效但是数据不会被持久化</p></li></ol><pre><code>​        优点：①持续性占用极少量的内存资源​        缺点：①日志文件会特别大，不适用于灾难恢复​              ②恢复效率远远低于RDB​    ​        适用于：内存比较小的计算机</code></pre><h3 id="第二节"><a href="#第二节" class="headerlink" title="第二节()"></a>第二节()</h3><ol><li><p>shutdown出现error</p><p><img src="03.assets/image-20191017222358172.png" alt="image-20191017222358172"></p><p>解决:</p><blockquote><p><a href="https://blog.csdn.net/github_33809414/article/details/82531642" target="_blank" rel="noopener">https://blog.csdn.net/github_33809414/article/details/82531642</a></p><ol><li><p>找到redis.conf  (/usr/local/redis/redis.conf)</p></li><li><p>vim redis.conf</p></li><li><p>找到logfile    dir./ 两处地方</p></li><li><p>分别加入redis.log  redis_dbfile/</p></li><li><p>权限全改成777</p></li><li><p>注意!!!</p><p>安装目录的redis目录页需要改</p><p><img src="03.assets/image-20191017222656945.png" alt="image-20191017222656945"></p></li></ol></blockquote></li><li><p>d</p></li><li><ul><li></li></ul></li></ol><h3 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h3><h2 id="第一天-1"><a href="#第一天-1" class="headerlink" title="第一天"></a>第一天</h2><h3 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h3><h3 id="第二节-1"><a href="#第二节-1" class="headerlink" title="第二节"></a>第二节</h3><h3 id="第三节-1"><a href="#第三节-1" class="headerlink" title="第三节"></a>第三节</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
